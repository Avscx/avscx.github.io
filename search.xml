<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C_基础知识]]></title>
    <url>%2F2019%2F04%2F25%2FC_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[API(Application Programming Interface) – 应用程序编程接口 应用程序接口为：“计算机操作系统（Operating system）或程序库提供给应用程序调用使用的代码”。其主要目的是让应用程序开发人员得以调用一组例程功能，而无须考虑其底层的源代码为何、或理解其内部工作机制的细节。API本身是抽象的，它仅定义了一个接口，而不涉入应用程序如何实现的细节 Windows 程序设计有两种方式： C语言方式（SDK）和 C++方式（对SDK函数进行包装，如VC中的MFC、BCB中的VCL） SDK(Software Development Kit) – 软件开发工具包一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等创建应用软件的开发工具的集合。Windows SDK 编程简单的说就是使用 C 语言调用 Windows 提供的 API 函数的编程 MFC(Microsoft Foundations Classes) – 微软基础类MFC 是一个微软公司提供的类库（class libraries），以 C++ 类的形式封装了 Windows API，并且包含一个应用程序框架，以减少应用程序开发人员的工作量。其中包含的类包含大量 Windows 句柄封装类和很多 Windows 的内建控件和组件的封装类。简而言之，SDK 编程就是直接利用 Windows 提供的 API 函数进行编程，而 MFC 是利用类的概念对 API 函数进行封装，结合面向对象的继承、多态组成一个个类，共有一百多个类组成 为什么不推荐初学者学习 MFC？微软千辛万苦封装了个 MFC，但很多资深程序员反而警告初学者不要去学习 MFC，这是为什么呢？对于程序员来说，操作系统的功能完全是由 API 来定义。也就是说，操作系统若能够完成的事情，都会提供相应的 API 供调用。因此，搞熟这些 API 对你理解 Windows 的运行机制非常有帮助。今后你无论使用什么来编写 Windows 程序，都是水到渠成。API 函数本身就是进行了一层封装（例如上边我们提到的，我们根本不需要去理解如何在屏幕上显示字符串的原理），而 MFC 是再对 API 进行封装。因此初学者如果直接学习 MFC 编程，就很难理解 Windows 的运行原理，而不理解原理的学习就会显得亦步亦趋。反过来，如果当你首先掌握了这些 API 函数以及 Windows 的运行机制，你再来学习 MFC，学习就会变得事半功倍了！ stdcall，cdecl，pascal，fastcall__cdecl__cdecl 是 C Declaration 的缩写，表示 C 语言默认的函数调用方法：所有参数从右到左依次入栈，这些参数由调用者清除，称为手动清栈。被调用函数不会要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。 __stdcall__stdcall 是 Standard Call 的缩写，是 C++ 的标准调用方式：所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是 this 指针。这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retnX，X 表示参数占用的字节数，CPU 在 ret 之后自动弹出 X 个字节的堆栈空间，称为自动清栈。函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。 __pascalpascal 是 Pascal 语言（Delphi）的函数调用方式，也可以在 C/C++ 中使用，参数压栈顺序与前两者相反。返回时的清栈方式与 stdcall 相同。 __fastcallfastcall 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此 fastcall 通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同，返回方式和 __stdcall 相当。 __thiscallthiscall 是为了解决类成员调用中 this 指针传递而规定的。thiscall 要求把 this 指针放在特定寄存器中，该寄存器由编译器决定。VC 使用 ecx，Borland 的 C++ 编译器使用 eax。返回方式和 __stdcall 相当。 fastcall 和 thiscall 涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以 Windows 上的 COM 对象接口都定义为 stdcall 调用方式。C 语言中不加说明默认函数为 cdecl 方式（C中也只能用这种方式），C++ 也一样，但是默认的调用方式可以在 IDE 环境中设置 宏定义和别名在 Windows 编程上的应用相关链接 staticstatic 的最主要功能是隐藏，其次因为 static 变量存放在静态存储区，所以它具备持久性和默认值 0相关链接 WNDCLASS 结构Windows 的窗口总是基于窗口类来创建的，窗口类同时确定了处理窗口消息的窗口过程(回调函数)在创建应用程序窗口之前，必须调用 RegisterClass 函数来注册窗口类。该函数只需要一个参数，即指向 WNDCLASS 窗口类的指针。因为 WNDCLASS 类包含了窗口所拥有的基本属性。 123456789101112typedef struct tagWNDCLASSW &#123; UINT style; WNDPROC lpfnWndProc; int cbClsExtra; int cbWndExtra; HINSTANCE hInstance; HICON hIcon; HCURSOR hCursor; HBRUSH hbrBackground; LPCWSTR lpszMenuName; LPCWSTR lpszClassName;&#125; WNDCLASSW, *PWNDCLASSW, NEAR *NPWNDCLASSW, FAR *LPWNDCLASSW; 成员解析 成员 含义 style 指定窗口类型，各种“类风格”（详见下方↓）可以使用按位或操作符组合起来 lpfnWndProc 指定窗口过程（必须是回调函数） cbClsExtra 预留的额外空间，一般为 0 cbWndExtra 预留的额外空间，一般为 0 hInstance 应用程序的实例句柄 hIcon 为所有基于该窗口类的窗口设定一个图标 hCursor 为所有基于该窗口类的窗口设定一个鼠标指针 hbrBackground 指定窗口背景色 lpszMenuName 指定窗口菜单 lpszClassName 指定窗口类名 style类风格 类风格 含义 CS_VREDRAW 移动或者调整窗口的高度（垂直方向）时，重绘整个窗口 CS_HREDRAW 移动或者调整窗口的宽度（水平方向）时，重绘整个窗口 CS_DBLCLKS 当用户光标在窗口内双击时，允许发送双击消息给窗口过程 CS_OWNDC 给予每个窗口实例分配一个唯一的 DC（注意，尽管这样是很方便，但它必须慎重使用，因为每个DC大约要占800个字节的内存） CS_CLASSDC 该窗口类的所有窗口实例都共享一个窗口类 DC CS_PARENTDC 1.将子窗口的裁剪区域设置到父窗口的 DC 中去，这样子窗口便可以在父窗口上绘制自身。（注意，这是子窗口从系统缓存中获取 DC，而不是使用父窗口的 DC。） — 2.指定该风格可以提高系统性能 CS_NOCLOSE 禁止系统菜单的关闭选项 CS_SAVEBITS 1.以位图形式保存被该窗口遮挡的屏幕部分，当给窗口移动以后，系统便可以用该保存的位图恢复屏幕移动的相应部分，从而系统不用向被该窗口遮挡的窗口发送 WM_PAINT 消息 — 2.该特性对于菜单类型的窗口比较合适，因为它通常是简短的显示一下之后便消失 — 3.设置该特性将增加显示该窗口的时间，因为它通常要先分配保存位图的内存 CS_BYTEALIGNCLIENT 在字节边界上（在 x 方向上）定位窗口的用户区域的位置 CS_BYTEALIGNWINDOW 在字节边界上（在 x 方向上）定位窗口的位置 CS_GLOBALCLASS 1.当调用 CreateWindow 或 CreateWindowEx 函数来创建窗口时允许它的 hInstance 参数和注册窗口类时传递给 RegisterClass 的 hInstance 参数不同 — 2.如果不指定该风格，则这两个 hInstance 必须相同 大写标识符在 Winodows 的定义中包含着许多大写标识符，这些标识符有很多都是以两个或三个字母作为前缀，且其后紧跟一个下划线： CS_HREDRAWDT_VCENTERSND_FILENAMECS_VREDRAWIDC_ARROWWM_CREATECW_USEDEFAULTIDI_APPLICATIONWM_DESTROYDT_CENTERMB_ICONERRORWM_PAINTDT_SINGLELINESND_ASYNCWS_OVERLAPPEDWINDOW 这些标识符其实都是宏定义，前缀标明该常量所属的一般类别，含义如下: 前缀 含义 CS 类风格选项（ClassStyle） CW 创建窗口选项（CreateWindow） DT 文本绘制选项（DrawText） IDI 图标的 ID 号（IDIcon） IDC 光标的 ID 号（IDCursor） MB 消息框选项（MessageBox） SND 声音选项（Sound） WM 窗口消息（WindowsMessage） WS 窗口风格（WindowStyles）]]></content>
      <categories>
        <category>C语言教程</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>C</tag>
        <tag>by-fishc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[西湖论剑_CTF-Notes]]></title>
    <url>%2F2019%2F04%2F16%2F%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91_CTF-Notes%2F</url>
    <content type="text"><![CDATA[EasyCpp1、获取输入push_back: c++中的vector头文件里面就有这个push_back函数，在vector类中作用为在vector尾部加入一个数据2、生成16个斐波那契数列递归生成3、transform4、取反比较std::accumulate这里可以动态调试跟进查看返回结果易知该函数作用为取反5、Re 123456789101112131415#!usr/bin/env python#coding=utf-8from pwn import *p = process('./easyCpp')flag = [987]res = [987,610,377,233,144,89,55,34,21,13,8,5,3,2,1,1]for i in range(15): flag.append(res[i+1] - res[0])print flagfor i in flag: p.sendline(str(i))print p.recv() Testre1、Input2、Check进入函数这个函数也是混淆，没什么作用由于v17为0，这里n、v23、v11为固定数值，直接动态调试可得Base58编码将base58编码后数据与D9cS9N9iHjMLTdA8YSMRMp进行比较，相同则getflag逆向代码: 1234567891011121314151617181920#!usr/bin/env python#coding=utf-8from Crypto.Util.number import long_to_bytesres = 'D9cS9N9iHjMLTdA8YSMRMp'byte = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'res_1 =[]for s in res: for i in range(len(byte)): if s == byte[i]: res_1.append(i)#print res_1 res_2 = 0for i in res_1: res_2 = res_2 * 58 + iprint long_to_bytes(res_2)#flag base58_is_boring Junk_Instruction1、程序由MFC编写，首先，使用XSPY定位窗口按键函数，可知check按键关键函数在偏移位0x2420处2、进入关键函数，存在条件语句，推测if语句判断后会输出成功或失败的信息3、进入偏移为0x2600函数存在一段数据，可能在程序执行过程中会用到由于程序存在大量花指令，分析发现在函数内存在jump语句一般带有一段固定的汇编代码，此处即为花指令，直接nop掉固定的字节流花指令去除脚本: 1234567891011121314151617#!usr/bin/env python#coding=utf-8from ida_bytes import get_bytes, patch_bytesimport readdr = 0x402400end = 0x403000buf = get_bytes(addr, end-addr)def handler1(s): s = s.group(0) print("".join(["%02x"%ord(i) for i in s])) s = "\x90"*len(s) return sp = r"\xe8\x00\x00\x00\x00.*?\xc3.*?\xc3\xBB\x22&#123;4&#125;"buf = re.sub(p, handler1, buf, flags=re.I)patch_bytes(addr, buf)print("Done") Nop掉花指令之后，由于程序还是采用之前的堆栈，需要让IDA重新分析（U C P）在偏移为0x2AF0函数中，对Input进行了长度判断和Handle一串字符，结合之后0x2CA0处函数，可知为RC4密钥在偏移为0x2CA0函数中，存在RC4算法将rc4加密后数据和一开始的那段数据进行比较4、逆向代码 1234567891011121314#!usr/bin/env python#coding=utf-8from Crypto.Cipher import ARC4if __name__ == '__main__': enc = '' res = [0x5B,0xD6,0xD0,0x26,0xC8,0xDD,0x19,0x7E,0x6E,0x3E,0xCB,0x16,0x91,0x7D,0xFF,0xAF,0xDD,0x76,0x64,0xB0,0xF7,0xE5,0x89,0x57,0x82,0x9F,0x0C,0x00,0x9E,0xD0,0x45,0xFA] for i in res: enc += chr(i) passwd = 'qwertyuiop' res_3 = ARC4.new(passwd) a = res_3.decrypt(enc) print a.decode('utf-8')[::-1]]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>windows</tag>
        <tag>ELF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[API-notes]]></title>
    <url>%2F2019%2F04%2F10%2FAPI-Notes%2F</url>
    <content type="text"><![CDATA[MessageBoxMessageBox 函数用于显示一个模态对话框，其中包含一个系统图标、 一组按钮和一个简短的特定于应用程序消息，如状态或错误的信息消息框中返回一个整数值，该值指示用户单击了哪个按钮 API 函数原型：注释：_In_ 说明该参数是输入的，opt 说明该参数是可选参数 1234567int WINAPI MessageBox( _In_opt_ HWND hWnd, _In_opt_ LPCTSTR lpText, _In_opt_ LPCTSTR lpCaption, _In_ UINT uType); 参数解析 参数 含义 hWnd 1.该消息框的父窗口句柄 2.如果此参数为NULL,则该消息框没有拥有父窗口 lpText 1.消息框的内容 lpCaption 1.消息框的标题 uType 1.指定一个决定对话框的内容和行为的位标志集,此参数可以通过指定下列标志或标志的组合，来显示消息框中的按钮以及图标 uType参数定义解析 按钮 含义 MB_OK 默认值，有一个“确认”按钮在里面 MB_YESNO 有“是”和“否”两个按钮在里面 MB_ABORTRETRYIGNORE 有“中止”，“重试”和“跳过”三个按钮在里面 MB_YESNOCANCEL 有“是”，“否”和“取消”三个按钮在里面 MB_RETRYCANCEL 有“重试”和“取消”两个按钮在里面 MB_OKCANCEL 有“确定”和“取消”两个按钮在里面 图标 含义 MB_ICONEXCLAMATION 一个惊叹号出现在消息框 MB_ICONWARNING 一个惊叹号出现在消息框 MB_ICONINFORMATION 一个圆圈中小写字母i组成的图标出现在消息框 MB_ICONASTERISK 一个圆圈中小写字母i组成的图标出现在消息框 MB_ICONSTOP 一个停止消息图标出现在消息框 MB_ICONERROR 一个停止消息图标出现在消息框 MB_ICONHAND 一个停止消息图标出现在消息框 默认按钮 含义 MB_DEFBUTTON1 指定第一个按钮为默认按钮 MB_DEFBUTTON2 指定第二个按钮为默认按钮 MB_DEFBUTTON3 指定第三个按钮为默认按钮 MB_DEFBUTTON4 指定第四个按钮为默认按钮 消息框形态 含义 MB_APPLMODAL 1.在 hWnd 参数标识的窗口中继续工作以前，用户一定响应消息框 2.但是，用户可以移动到其他线程的窗口且在这些窗口中工作 3.根据应用程序中窗口的层次机构，用户则以移动到线程内的其他窗口 4.所有母消息框的子窗口自动地失效，但是弹出窗口不是这样 5.如果既没有指定 MB_SYSTEMMODAL 也没有指定 MB_TASKMODAL，则 MB_APPLMODAL 为默认的 MB_SYSTEMMODAL 1.除了消息框有 WB_EX_TOPMOST 类型，否则 MB_APPLMODAL 和 MB_SYSTEMMODAL 一样 2.用系统模态消息框来改变各种各样的用户，主要的损坏错误需要立即注意（例如，内存溢出 3.如果不是那些与 hWnd 联系的窗口，此标志对用户对窗口的相互联系没有影响 MB_TASKMODAL 1.如果参数 hWnd 为 NULL 的话，那么除了所有属于当前线程高层次的窗口失效外，MB_TASKMODAL 和 MB_APPLMODAL 一样 2.当调用应用程序或库没有一个可以得到的窗口句柄时，可以使用此标志，但仍需要阻止输入到调用线程的其他窗口，而不是搁置其他线程 其他标志 含义 MB_DEFAULT_DESKTOP_ONLY 1.接收输入的当前桌面一定是一个默认桌面，否则函数调用失败 2.默认桌面是一个在用户已经记录且以后应用程序在此上面运行的桌面 MB_HELP 1.把一个Help按钮增加到消息框 2.选择Help按钮或按F1产生一个Help事件 MB_RIGHT 1.文本为右对齐 MB_RTLREADING 1.用在Hebrew和Arabic系统中从右到左的顺序显示消息和大写文本 MB_SETFOREGROUND 1.消息框变为前景窗口 2.在内部系统为消息个调用SetForegroundWindow函数 MB_TOPMOST 1.消息框用WS_EX_TOPMOST窗口类型来创建MB_SERVICE_NOTIFICATION 返回值: 返回值 含义 IDOK 用户按下了“确认”按钮 IDCANCEL 用户按下了“取消”按钮 IDABORT 用户按下了“中止”按钮 IDRETRY 用户按下了“重试”按钮 IDIGNORE 用户按下了“忽略”按钮 IDYES 用户按下了“是”按钮 IDNO 用户按下了“否”按钮 123456#include &lt;windows.h&gt;int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow)&#123; MessageBox(NULL, TEXT("这是我在鱼C学的第一个程序！"), TEXT("打招呼"), MB_OKCANCEL MB_ICONQUESTION MB_DEFBUTTON2); return 0;&#125; CreateWindowCreateWindow 函数创建一个重叠式窗口、弹出式窗口或子窗口。它指定窗口类，窗口标题，窗口风格，以及窗口的初始位置及大小（可选的）。函数也指该窗口的父窗口或所属窗口（如果存在的话），及窗口的菜单。若要使用除 CreateWindow 函数支持的风格外的扩展风格，则使用 CreateWindowEx 函数代替 CreateWindow 函数 API 函数原型：注释：_In_ 说明该参数是输入的，opt 说明该参数是可选参数 12345678910111213HWND WINAPI CreateWindow( _In_opt_ LPCTSTR lpClassName, // 窗口类名称 _In_opt_ LPCTSTR lpWindowName, // 窗口标题 _In_ DWORD dwStyle, // 窗口风格，或称窗口格式 _In_ int x, // 初始 x 坐标 _In_ int y, // 初始 y 坐标 _In_ int nWidth, // 初始 x 方向尺寸 _In_ int nHeight, // 初始 y 方向尺寸 _In_opt_ HWND hWndParent, // 父窗口句柄 _In_opt_ HMENU hMenu, // 窗口菜单句柄 _In_opt_ HINSTANCE hInstance, // 程序实例句柄 _In_opt_ LPVOID lpParam // 创建参数); 参数 含义 lpClassName 1.窗口类名称，可以是一个指向 NULL 结束的字符串或一个整型数值 — 2.如果是字符串，它指定了窗口的类名。这个类名可以是任何用函数RegisterClass注册的类名，或是任何预定义的控制类名 — 3.如是一个整型量，它是由此前调用theGlobalAddAtom函数产生的全局量。这个小于0xC000的16位数必须是lpClassName参数字的低16位，该参数的高位必须是0 lpWindowName 1.窗口标题，一个指向NULL结束的字符串指针 — 2.如果窗口风格指定了标题条，由lpWindowName指向的窗口标题将显示在标题条上 — 3.当使用Createwindow函数来创建控制例如按钮，选择框和静态控制时，可使用lpWindowName来指定控制文本 dwStyle 指定创建窗口的风格（详见下方↓） x 1.指定窗口的初始水平位置（x坐标） — 2.对一个层叠或弹出式窗口，x参数是屏幕坐标系的窗口的左上角的初始x坐标 — 3.对于子窗口，x是子窗口左上角相对父窗口客户区左上角的初始x坐标 — 4.如果该参数被设为CW_USEDEFAULT则系统为窗口选择缺省的左上角坐标并忽略y参数，CW_USEDEFAULT只对层叠窗口有效，如果为弹出式窗口或子窗口设定，则x和y参数被设为零。 y 1.指定窗口的初始垂直位置（y坐标） — 2.对一个层叠或弹出式窗口，y参数是屏幕坐标系的窗口的左上角的初始y坐标 — 3.对于子窗口，y是子窗口左上角相对父窗口客户区左上角的初始y坐标 — 4.对于列表框，y是列表框客户区左上角相对父窗口客户区左上角的初始y坐标 — 5.如果层叠窗口是使用WS_VISIBLE风格位创建的并且x参数被设为CW_USEDEFAULT，则系统将忽略y参数 nWidth 1.以设备单元指明窗口的宽度 — 2.对于层叠窗口，nWidth的值或是屏幕坐标的窗口宽度或是CW_USEDEFAULT — 3.若nWidth是CW_USEDEFAULT，则系统为窗口选择一个默认的高度和宽度（默认宽度为从初始x坐标开始到屏幕的右边界，缺省高度为从初始y坐标开始到目标区域的顶部。)，CW_USEDEFAULT只对层叠窗口有效，如果为弹出式窗口和子窗口设定CW_USEDEFAULT标志则nWidth和nHeight被设为零 nHeight 1.以设备单元指明窗口的高度 — 2.对于层叠窗口，nHeight是屏幕坐标的窗口宽度 — 3.若nWidth被设为CW_USEDEFAULT，则系统忽略nHeight参数，自动为nWidth和nHeight设置默认参数 hWndParent 1.指向被创建窗口的父窗口或所有者窗口的句柄 — 2.若要创建一个子窗口或一个从属窗口，需提供一个有效的窗口句柄 — 3.创建一个单纯的消息窗口，可以提供HWND_MESSAGE或提供一个己存在的消息窗口的句柄 hMenu 1.指向窗口菜单句柄，或依据窗口风格指明一个子窗口标识 — 2.对于层叠或弹出式窗口，hMenu指定窗口使用的菜单：如果使用了菜单类，则hMenu可以为NULL — 3.对于子窗口，hMenu指定了该子窗口标识（一个整型量），一个对话框使用这个整型值将事件通知父类。应用程序确定子窗口标识，这个值对于相同父窗口的所有子窗口必须是唯一的 hInstance 与窗口相关联的模块实例的句柄 lpParam 1.指向一个值的指针，该值传递给窗口WM_CREATE消息。该值通过在IParam参数中的CREATESTRUCT结构传递 — 2.如果应用程序调用CreateWindow创建一个MDI客户窗口，则lpParam必须指向一个CLIENTCREATESTRUCT结构 DwStyle窗口风格解析 窗口风格 含义 WS_BORDER 创建一个带边框的窗口 WS_CAPTION 创建一个有标题框的窗口（包含了 WS_BODER 风格） WS_CHILD 创建一个子窗口，这个风格的窗口不能拥有菜单也不能与 WS_POPUP 风格合用 WS_CHILDWINDOW 与 WS_CHILD 相同 WS_CLIPCHILDREN 当在父窗口内绘图时，排除子窗口区域，在创建父窗口时使用这个风格 WS_CLIPSIBLINGS 1.排除子窗口之间的相对区域，也就是，当一个特定的窗口接收到 WM_PAINT 消息时，WS_CLIPSIBLINGS 风格将所有层叠窗口排除在绘图之外，只重绘指定的子窗口 — 2.如果未指定该风格，并且子窗口是层叠的，则在重绘子窗口的客户区时，就会重绘邻近的子窗口 WS_DISABLED 1.创建一个初始状态为禁止的子窗口，一个禁止状态的窗口不能接受来自用户的输入信息 — 2.在窗口创建之后，可以调用 EnableWindow 函数来启用该窗口 WS_DLGFRAME 创建一个带对话框边框风格的窗口，这种风格的窗口不能带标题条 WS_GROUP 1.指定一组“控制窗口”的第一个“控制窗口” — 2.这个“控制窗口”组由第一个“控制窗口”和随后定义的“控制窗口”组成，自第二个“控制窗口”开始每个“控制窗口”具有 WS_GROUP 风格 — 3.每个组的第一个“控制窗口”带有 WS_TABSTOP 风格，从而使用户可以在组间移动 — 4.用户随后可以使用光标在组内的控制间改变键盘焦点 WS_HSCROLL 创建一个有水平滚动条的窗口 WS_ICONIC 创建一个初始状态为最小化状态的窗口，与 WS_MINIMIZE 风格相同 WS_MAXIMIZE 创建一个初始状态为最大化状态的窗口 WS_MAXIMIZEBOX 创建一个具有最大化按钮的窗口，该风格不能与 WS_EX_CONTEXTHELP 风格同时出现，同时必须指定 WS_SYSMENU 风格 WS_MINIMIZE 创建一个初始状态为最小化状态的窗口，与 WS_ICONIC 风格相同 WS_MINIMIZEBOX 创建一个具有最小化按钮的窗口，该风格不能与 WS_EX_CONTEXTHELP 风格同时出现，同时必须指定 WS_SYSMENU 风格 WS_OVERLAPPED 产生一个层叠的窗口，一个层叠的窗口有一个标题条和一个边框，与 WS_TILED 风格相同 WS_OVERLAPPEDWINDOW 相当于（WS_OVERLAPPED、WS_CAPTION、WS_SYSMENU、WS_THICKFRAME、WS_MINIMIZEBOX、WS_MAXIMIZEBOX），与WS_TILEDWINDOW风格相同 WS_POPUP 创建一个弹出式窗口，该风格不能与WS_CHILD风格同时使用。 WS_POPUPWINDOW 相当于（WS_POPUP、WS_BORDER、WS_SYSMENU），但WS_CAPTION和WS_POPUPWINDOW必须同时设定才能使窗口某单可见 WS_SIZEBOX 创建一个可调边框的窗口，与WS_THICKFRAME风格相同 WS_SYSMENU 创建一个在标题条上带有窗口菜单的窗口，必须同时设定WS_CAPTION风格 WS_TABSTOP 1.创建一个“控制窗口”，在用户按下Tab键时可以获得键盘焦点。 — 2.按下Tab键后使键盘焦点转移到下一具有WS_TABSTOP风格的“控制窗口” WS_THICKFRAME 创建一个具有可调边框的窗口，与WS_SIZEBOX风格相同 WS_TILED 产生一个层叠的窗口，一个层叠的窗口有一个标题和一个边框，与WS_OVERLAPPED风格相同 WS_TILEDWINDOW 相当于（WS_OVERLAPPED、WS_CAPTION、WS_SYSMENU、WS_THICKFRAME、WS_MINIMIZEBOX、WS_MAXIMIZEBOX），与WS_OVERLAPPEDWINDOW风格相同 WS_VISIBLE 创建一个初始状态为可见的窗口 WS_VSCROLL 创建一个有垂直滚动条的窗口 返回值:1.如果函数成功，返回值为新窗口的句柄；2.如果函数失败，返回值为 NULL。 ShowWindowShowWindow 函数用于设置窗口的显示状态应用程序第一次调用 ShowWindow 时，应该使用 WinMain 函数的 nCmdshow 参数作为它的 nCmdShow 参数。在随后调用 ShowWindow 函数时，必须使用下列显示方式中的一个给定值，而不是由 WinMain 函数的 nCmdSHow 参数指定的值。 1234BOOL WINAPI ShowWindow( _In_ HWND hWnd, _In_ int nCmdShow); 参数 含义 hWnd 窗口句柄 nCmdShow 控制窗口如何显示，如果发送应用程序的程序提供了 STARTUPINFO 结构，则应用程序第一次调用 ShowWindow 时该参数被忽略。否则，在第一次调用 ShowWindow 函数时，该值应为在函数 WinMain 中 nCmdShow 参数 在随后的调用中，nCmdShow 参数可以为下列值之一 显示方式 含义 SW_FORCEMINIMIZE 1. 最小化窗口，即使拥有窗口的线程被挂起也会最小化 — 2.在从其他线程最小化窗口时才使用这个参数 SW_HIDE 隐藏窗口并激活其他窗口 SW_MAXIMIZE 最大化指定的窗口 SW_MINIMIZE 最小化指定的窗口并且激活在 Z 序中的下一个顶层窗口 SW_RESTORE 1.激活并显示窗口 — 2.如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置 — 3.在恢复最小化窗口时，应用程序应该指定这个标志。 SW_SHOW 在窗口原来的位置以原来的尺寸激活并显示窗口 SW_SHOWDEFAULT 依据在 STARTUPINFO 结构中指定的 SW_FLAG 标志设定显示状态，STARTUPINFO 结构是由启动应用程序的程序传递给 CreateProcess 函数的。 SW_SHOWMAXIMIZED 激活窗口并将其最大化 SW_SHOWMINIMIZED 激活窗口并将其最小化 SW_SHOWMINNOACTIVE 1.窗口最小化 — 2.在窗口激活的情况下，这个值跟 SW_SHOWMINIMIZED 很相似 SW_SHOWNA 1.以窗口原来的位置以原来的尺寸显示窗口 — 2.在窗口激活的情况下，这个值跟 SW_SHOW 很相似 SW_SHOWNOACTIVATE 1.以窗口最近一次的位置和尺寸显示窗口 — 2.在窗口激活的情况下，这个值跟 SW_SHOWNORMAL 很相似 SW_SHOWNORMAL 1.激活并显示一个窗口 — 2.如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小 — 3.应用程序在第一次显示窗口的时候应该指定此标志 返回值:1.如果窗口之前可见，则返回值为非 02.如果窗口之前被隐藏，则返回值为 0 UpdateWindowUpdateWindow 函数绕过应用程序的消息队列，直接发送 WM_PAINT 消息给指定窗口的窗口过程。如果窗口更新的区域不为空，UpdateWindow 函数通过发送一个 WM_PAINT 消息来更新指定窗口的客户区。如果更新区域为空，则不发送消息。 123BOOL UpdateWindow( _In_ HWND hWnd); 参数 含义 hWnd 指定要更新的窗口的句柄 返回值:1.如果函数调用成功，返回值为非 02.如果函数调用不成功，返回值为 0 MSG 结构在 Windows 程序中，消息是由 MSG 结构体来表示的 12345678typedef struct tagMSG &#123; HWND hwnd; UINT message; WPARAM wParam; LPARAM lParam; DWORD time; POINT pt;&#125; MSG, *PMSG, *LPMSG; 成员 含义 hwnd 指定接收消息的窗口句柄,如果是线程消息，该值是 NULL message 1.消息的标识符，由于数值不便于记忆，所以 Windows 将消息对应的数值定义为 WM_XXX 宏的形式 — 2.应用程序消息只能使用低 16 位，高 16 位被系统保留 — 3.传送门：Windows 常用消息及含义 wParam 指定消息的附加消息，确切的含义取决于消息成员的值 lParam 指定消息的附加消息，确切的含义取决于消息成员的值 time 该消息被投放到消息队列的时间 pt 当消息被投放到消息队列的时，鼠标位于屏幕中的位置]]></content>
      <categories>
        <category>API教程</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git使用]]></title>
    <url>%2F2019%2F04%2F08%2FGit%2F</url>
    <content type="text"><![CDATA[各系统平台安装gitlinux： 使用命令: sudo apt-get install git 分支：（debian、unbuntu linux): sudo apt-get git-core Max os: 通过homebrew安装git，[教程]http://brew.sh/ 通过xcode-preferences-downloads-command Line tools安装 Windows: 1.下载mysysgit 2.设置身份：(git Bash) 3.git config --global user.name &quot;your name“ 4.git config --global user.email &quot;your email address&quot; 创建版本库（本机）选择一个地方，创建一个空目录 1.mkdir 目录name 2.cd 目录name 3.pwd 显示当前目录（git Bash 窗口上方也有显示当前目录） 初始化仓库(变为可管理):git init 添加一个文本文件：（windows下由于编码问题不能用自带笔记本编辑，可使用Notepad ++) 提交到暂存区:git add 文件名字 提交到版本库（只能跟踪文本文件如txt的改动，Microsofe的word由于使用二进制编辑不能跟踪改动）:git commit -m &quot;备注” 时光穿梭机查看仓库当前状态:git status 查看当前修改与上一次修改的difference：git diff 查看历史记录：git log 查看历史记录（简化）：git log --pretty=online 回退：git reset --hard commit_id （最近也可用HEAD、HEAD^、HEAD~number） 查看历史命令：git reflog 搭配回退有神奇的效果 丢弃工作区修改：git checkout --file 撤回暂存区修改：git reset HEAD file（由于暂存区会整合最新add的修改，因此不用考虑到commit_id）（从暂存区撤回的文件会被重新调回工作区） 从版本库中删除文件：git rm file 从版本库恢复文件：git checkout --file（等价于撤销工作区修改）（工作区最新修改会消失） 注意点:只有添加（git add）到暂存区的文件才能提交（git commit）到版本库 远程仓库创建SSH KEY（可在用户主目录下查看有无.ssh目录（包含id_rsa（私钥）\id_rsa.pub（公钥）))若无,在git Bash输入命令：ssh-keygen -t rsa -C “邮件地址” 最后 将ssh key中的id_rsa.pub添加到github上的ssh keys中，便可向github推送文件（公开） 注意：每台电脑的ssh key不同 关联远程仓库：git remote add origin git@github.com:github名称/仓库名称（.git) 向远程仓库推送本地分支所有内容：git push -u origin master 推送最新修改：git push origin master 克隆一个远程仓库：git clone git@github.com:github名称/仓库名称(远程仓库） 分支管理创建分支 git branch 分支名称 切换分支 git checkout 分支名称 创建并切换分支 git checkout -b 分支名称 git merge命令用于合并指定分支到当前分支 删除分支 git branch -d &lt;name&gt; 用git log --graph命令可以看到分支合并图 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash 然后去修复bug，修复后，再git stash pop，回到工作现场 恢复有两种办法，一种是用git stash apply进行恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了 可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash 开发一个新feature，最好新建一个分支；如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除 多人协作的工作模式： 查看远程库信息，使用git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突 注意： 1.首先，可以试图用git push origin branch-name推送自己的修改； 2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 3.如果合并有冲突，则解决冲突，并在本地提交； 4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！ 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name 标签命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id； git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息； git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;可以用PGP签名标签； 命令git tag可以查看所有标签。 远程库关联远程库 git remote add &lt;name&gt; &lt;address&gt; 自定义Git缩写命令名称 eg:git config --global alias.st status 或者修改.gitconfig文件 [alias] co = checkout st = status]]></content>
      <categories>
        <category>Git教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
